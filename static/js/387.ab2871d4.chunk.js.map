{"version":3,"file":"static/js/387.ab2871d4.chunk.js","mappings":"sSAEaA,EAAOC,EAAAA,GAAAA,GAAH,uJAUJC,EAAWD,EAAAA,GAAAA,GAAH,sFAKRE,EAAYF,EAAAA,GAAAA,IAAH,uCAITG,EAAQH,EAAAA,GAAAA,IAAH,qCAILI,EAAQJ,EAAAA,GAAAA,EAAH,uHAOLK,EAAWL,EAAAA,GAAAA,EAAH,kG,SCkCrB,EAzDa,WACT,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAaA,IAXAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,8GAEwBC,EAAAA,EAAAA,IAAeN,GAFvC,OAEcO,EAFd,OAGQH,EAAQG,GAHhB,gDAKQC,EAAAA,GAAAA,MAAY,KAAMC,SAL1B,0DADY,uBAAC,WAAD,wBASZC,EACH,GAAE,CAACV,IACCG,EAKL,OACA,8BAEwB,IAAhBA,EAAKQ,QACD,SAAClB,EAAD,UACKU,EAAKS,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,UACjC,OACI,SAACrB,EAAD,WACI,UAACC,EAAD,YACI,SAACC,EAAD,CAAOoB,IAAKH,EAAeI,EAAAA,GAAWJ,EAAeK,EAAAA,GAASC,IAAKP,KACnE,SAACf,EAAD,UAAQe,KACR,UAACd,EAAD,yBAAsBiB,SAJfD,EAQtB,OAGL,gDAMf,C,+HCrDM,IAAMG,EAAW,sCACXC,EAAU,mEACVE,EAAY,sCACZC,EAAY,qC,8LCDzBC,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAGHC,EAAU,mCAAG,6GAEFF,EAAAA,GAAAA,IAAA,sCAAyCC,IAFvC,cAEZjB,EAFY,yBAGXA,EAAEmB,KAAKC,SAHI,gCAKlBC,QAAQC,IAAR,MALkB,yDAAH,qDAUVC,EAAW,mCAAG,WAAMC,GAAN,gFACjBC,EAAS,IAAIC,gBAAgB,CAC/BC,QAASV,EACTO,MAAAA,IAHmB,kBAMHR,EAAAA,GAAAA,IAAA,uBAA0BS,IANvB,cAMbzB,EANa,yBAOZA,EAAEmB,KAAKC,SAPK,gCASnBC,QAAQC,IAAR,MATmB,yDAAH,sDAcXM,EAAiB,mCAAG,WAAMnC,GAAN,gGAETuB,EAAAA,GAAAA,IAAA,gBAAmBvB,EAAnB,oBAAsCwB,IAF7B,cAEnBjB,EAFmB,yBAGlBA,EAAEmB,MAHgB,gCAKzBE,QAAQC,IAAR,MALyB,yDAAH,sDASjBvB,EAAc,mCAAG,WAAMN,GAAN,gGAENuB,EAAAA,GAAAA,IAAA,gBAAmBvB,EAAnB,4BAA8CwB,IAFxC,cAEhBjB,EAFgB,yBAGfA,EAAEmB,KAAKvB,MAHQ,gCAKtByB,QAAQC,IAAR,MALsB,yDAAH,sDAUdO,EAAY,mCAAG,WAAMpC,GAAN,gGAEJuB,EAAAA,GAAAA,IAAA,gBAAmBvB,EAAnB,4BAA8CwB,IAF1C,cAEdjB,EAFc,yBAGbA,EAAEmB,KAAKC,SAHM,gCAKpBC,QAAQC,IAAR,MALoB,yDAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","defaultImages/defaultImages.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\nlist-style: none;\ndisplay: flex;\ngap: 15px;\nflex-direction: row;\nflex-wrap: wrap;\nmargin-top: 20px;\npadding-left: 15px;\n`\n\nexport const ListItem = styled.li`\n  display: flex;\n  border: 2px solid rgba(109, 89, 171, 1);\n`\n\nexport const ListBlock = styled.div`\nwidth: 220px;\n`\n\nexport const Image = styled.img`\nwidth: 220px;`\n\n\nexport const Title = styled.p`\nfont-size: 16px;\nfont-weight: semibold;\ncolor: white;\npadding-top: 5px;\ntext-align: center;`\n\nexport const Subtitle = styled.p`\nfont-size: 14px;\ncolor: white;\npadding-top: 10px;\ntext-align: center;\n`","import { DEF_IMG, DEF_PATH } from 'defaultImages/defaultImages';\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport { fetchMovieCast } from 'services/api';\nimport { Image, List, ListBlock, ListItem, Subtitle, Title } from './Cast.styled';\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n\n    useEffect(() => {\n        async function getMoviesCast() {\n            try {\n                const r = await fetchMovieCast(movieId);\n                setCast(r);\n            } catch (error) {\n                toast.error(error.message)\n            }\n        }\n        getMoviesCast();\n    }, [movieId]);\n    if (!cast) {\n        return;\n    }\n\n\n    return (\n    <>\n        {\n            cast.length !== 0 ? (\n                <List>\n                    {cast.map(({ name, profile_path, id, character }) => {\n                        return (\n                            <ListItem key={id}>\n                                <ListBlock>\n                                    <Image src={profile_path ? DEF_PATH + profile_path : DEF_IMG} alt={name} />\n                                    <Title>{name}</Title>\n                                    <Subtitle>Character: {character}</Subtitle>\n                                </ListBlock>\n                            </ListItem>\n                        );\n                    })}\n                </List>\n            ) : (\n                <p>No information here</p>\n                )\n   \n            }\n    </>    \n    );\n};\n\nCast.propTypes = {\n    cast: PropTypes.arrayOf(\n        PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            profile_path: PropTypes.string,\n            id: PropTypes.number.isRequired,\n            character: PropTypes.string,\n        })\n    ),\n};\n\nexport default Cast;","export const DEF_PATH = 'https://www.themoviedb.org/t/p/w500';\nexport const DEF_IMG = 'https://en-images.kinorium.com/movie/1080/1662246.jpg?1556722314';\nexport const BACK_PATH = 'https://www.themoviedb.org/t/p/w500';\nexport const COMP_PATH = 'https://image.tmdb.org/t/p/original';","import Axios from 'axios';\n\nAxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '941cb65a7dbaeeae793e2e0a05475118';\n\n\nexport const fetchFilms = async () => {\n    try {\n        const r = await Axios.get(`trending/movie/week?api_key=${API_KEY}`);\n        return r.data.results;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n\nexport const fetchSource = async query => {\n    const params = new URLSearchParams({\n        api_key: API_KEY,\n        query,\n    });\n    try {\n        const r = await Axios.get(`search/movie?${params}`);\n        return r.data.results;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n\nexport const fetchMovieDetails = async movieId => {\n    try {\n        const r = await Axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n        return r.data;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const fetchMovieCast = async movieId => {\n    try {\n        const r = await Axios.get(`movie/${movieId}/credits?api_key=${API_KEY}`);\n        return r.data.cast;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n\nexport const fetchReviews = async movieId => {\n    try {\n        const r = await Axios.get(`movie/${movieId}/reviews?api_key=${API_KEY}`);\n        return r.data.results;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n\n\n// https://api.themoviedb.org/3/movie/76341?api_key=<<api_key>>\n// GET /trending/{media_type}/{time_window}"],"names":["List","styled","ListItem","ListBlock","Image","Title","Subtitle","movieId","useParams","useState","cast","setCast","useEffect","fetchMovieCast","r","toast","message","getMoviesCast","length","map","name","profile_path","id","character","src","DEF_PATH","DEF_IMG","alt","BACK_PATH","COMP_PATH","Axios","API_KEY","fetchFilms","data","results","console","log","fetchSource","query","params","URLSearchParams","api_key","fetchMovieDetails","fetchReviews"],"sourceRoot":""}
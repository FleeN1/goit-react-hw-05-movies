{"version":3,"file":"static/js/994.e463b396.chunk.js","mappings":"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","sources":["components/MoviesItem/MoviesItem.jsx","components/MoviesList/MoviesList.jsx","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router';\nimport { NavLink } from 'react-router-dom';\n\nexport const MovieItem = ({ movie }) => {\n    const location = useLocation();\n    const { id, poster_path, title } = movie;\n    return (\n        <>\n            <li>\n                <NavLink to={`/movies/${id}`} state={{from: location}}>\n                    <img src={poster_path} alt={title} />\n                    <p>{title}</p>\n                </NavLink>\n            </li>\n        </>\n    );\n};\n\nMovieItem.propTypes = {\n    movie: PropTypes.shape({\n        poster_path: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n    }),\n};\n\nexport default MovieItem;\n","import PropTypes from 'prop-types';\nimport { MovieItem } from 'components/MoviesItem/MoviesItem';\n\n\nconst MoviesList = ({ movies }) => {\n    return (\n        <div>\n            <ul>\n                {movies.map(movie => (\n                    <MovieItem movie={movie} key={movie.id} />\n                ))}\n            </ul>\n        </div>\n    );\n};\n\n\nMoviesList.propTypes = {\n    movies: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired\n        })\n    ),\n};\n\nexport default MoviesList;","import { useState } from \"react\";\nimport { toast } from 'react-toastify';\nimport PropTypes from \"prop-types\";\n\nexport default function SeachBar({ getSearchQuery }) {\n    const [input, setInput] = useState('');\n\n    const handleInput = e => {\n        setInput(e.target.value.toLowerCase());\n        // console.log(e.target.value);\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        input.trim === '' ? toast.error('Please enter a new word') : getSearchQuery(input);\n        setInput('');\n    };\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input\n                    name='input'\n                    value={input}\n                    type=\"text\"\n                    onChange={handleInput}\n                    placeholder=\"Poisk Filmikov\"\n                />\n            <button type=\"submit\">Search</button>\n            </form> \n        </div>\n    )\n};\n\nSeachBar.propTypes = {\n    getSearchQuery: PropTypes.func.isRequired,\n};","import Loader from \"components/Loader/Loader\";\nimport MoviesList from \"components/MoviesList/MoviesList\";\nimport Searchbar from \"components/Searchbar\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { fetchSource } from \"services/api\";\n\n\n\n\nconst Movies = () => {\n    const [movies, setMovies] = useState([]);\n    const [query, setQuery] = useState('');\n    const [status, setStatus] = useState('idle');\n    const [searchParams, setSearchParams] = useSearchParams();\n    const movieNames = searchParams.get('query') ?? '';\n\n    const newQuery = query => {\n        const newParams = query !== '' ? { query } : {};\n        setSearchParams(newParams);\n    };\n\n\n    useEffect(() => {\n        if (movieNames === '') {\n            return;\n        }\n        async function getMovies() {\n            try {\n                setStatus('pending');\n                const r = await fetchSource(movieNames);\n                setMovies(r);\n                setStatus('resolved');\n            } catch (error) {\n                setStatus('rejected');\n                toast(error.message);\n            }\n        }\n        getMovies();\n    }, [movieNames]);\n\n    useEffect(() => {\n        if (query === '') {\n            return;\n        }\n        async function getMovies() {\n            try {\n                setStatus('pending');\n                const r = await fetchSource(query);\n                setMovies(r);\n                setStatus('resolved');\n            } catch (error) {\n                setStatus('rejected');\n                toast(error.message);\n            }\n        }\n        getMovies();\n    }, [query]);\n\n\n    const handleSearch = input => {\n        setQuery(input.trim());\n        newQuery(input.trim());\n    }\n\n    return (\n        <div>\n            <Searchbar getSearchQuery={handleSearch} />\n            \n            {movies.length > 0 && <MoviesList movies={movies} />}\n            {status === 'pending' && <Loader/>}\n        </div>\n    )\n}\n\nexport default Movies;","import Axios from 'axios';\n\nAxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '941cb65a7dbaeeae793e2e0a05475118';\n\n\nexport const fetchFilms = async () => {\n    try {\n        const r = await Axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n        return r.data.results;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n\nexport const fetchSource = async query => {\n    const params = new URLSearchParams({\n        api_key: API_KEY,\n        query,\n    });\n    try {\n        const r = await Axios.get(`search/movie?${params}`);\n        return r.data.results;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n\nexport const fetchMovieDetails = async movieId => {\n    try {\n        const r = await Axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n        return r.data;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const fetchMovieCast = async movieId => {\n    try {\n        const r = await Axios.get(`movie/${movieId}/credits?api_key=${API_KEY}`);\n        return r.data.cast;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n\nexport const fetchReviews = async movieId => {\n    try {\n        const r = await Axios.get(`movie/${movieId}/reviews?api_key=${API_KEY}`);\n        return r.data.results;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n\n\n// https://api.themoviedb.org/3/movie/76341?api_key=<<api_key>>\n// GET /trending/{media_type}/{time_window}"],"names":["MovieItem","movie","location","useLocation","id","poster_path","title","to","state","from","src","alt","movies","map","SeachBar","getSearchQuery","useState","input","setInput","onSubmit","e","preventDefault","trim","toast","name","value","type","onChange","target","toLowerCase","placeholder","setMovies","query","setQuery","status","setStatus","useSearchParams","searchParams","setSearchParams","movieNames","get","useEffect","fetchSource","r","message","getMovies","newQuery","length","MoviesList","Loader","Axios","API_KEY","fetchFilms","data","results","console","log","params","URLSearchParams","api_key","fetchMovieCast","movieId","cast","fetchReviews"],"sourceRoot":""}
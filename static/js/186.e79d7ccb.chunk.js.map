{"version":3,"file":"static/js/186.e79d7ccb.chunk.js","mappings":"kOAoDA,UA9CgB,WACZ,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,8GAEwBC,EAAAA,EAAAA,IAAaN,GAFrC,OAEcO,EAFd,OAGQH,EAAWG,GAHnB,gDAKQC,EAAAA,GAAAA,MAAY,KAAMC,SAL1B,0DADY,uBAAC,WAAD,wBASZC,EACH,GAAE,CAACV,KAGA,8BACwB,IAAnBG,EAAQQ,QACL,wBACKR,EAAQS,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACxB,OACI,2BACI,oCAAYD,MACZ,uBAAIC,MAFCF,EAKhB,OAGL,sDAIf,C,8LCtCDG,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAGHC,EAAU,mCAAG,6GAEFF,EAAAA,GAAAA,IAAA,sCAAyCC,IAFvC,cAEZV,EAFY,yBAGXA,EAAEY,KAAKC,SAHI,gCAKlBC,QAAQC,IAAR,MALkB,yDAAH,qDAUVC,EAAW,mCAAG,WAAMC,GAAN,gFACjBC,EAAS,IAAIC,gBAAgB,CAC/BC,QAASV,EACTO,MAAAA,IAHmB,kBAMHR,EAAAA,GAAAA,IAAA,uBAA0BS,IANvB,cAMblB,EANa,yBAOZA,EAAEY,KAAKC,SAPK,gCASnBC,QAAQC,IAAR,MATmB,yDAAH,sDAcXM,EAAiB,mCAAG,WAAM5B,GAAN,gGAETgB,EAAAA,GAAAA,IAAA,gBAAmBhB,EAAnB,oBAAsCiB,IAF7B,cAEnBV,EAFmB,yBAGlBA,EAAEY,MAHgB,gCAKzBE,QAAQC,IAAR,MALyB,yDAAH,sDASjBO,EAAc,mCAAG,WAAM7B,GAAN,gGAENgB,EAAAA,GAAAA,IAAA,gBAAmBhB,EAAnB,4BAA8CiB,IAFxC,cAEhBV,EAFgB,yBAGfA,EAAEY,KAAKW,MAHQ,gCAKtBT,QAAQC,IAAR,MALsB,yDAAH,sDAUdhB,EAAY,mCAAG,WAAMN,GAAN,gGAEJgB,EAAAA,GAAAA,IAAA,gBAAmBhB,EAAnB,4BAA8CiB,IAF1C,cAEdV,EAFc,yBAGbA,EAAEY,KAAKC,SAHM,gCAKpBC,QAAQC,IAAR,MALoB,yDAAH,qD","sources":["components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport { fetchReviews } from 'services/api';\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n        async function getReviews() {\n            try {\n                const r = await fetchReviews(movieId);\n                setReviews(r);\n            } catch (error) {\n                toast.error(error.message)\n            }\n        }\n        getReviews();\n    }, [movieId]);\n\n    return (\n        <>\n            {reviews.length !== 0 ? (\n                <ul>\n                    {reviews.map(({ id, author, content }) => {\n                        return (\n                            <li key={id}>\n                                <p>Author: {author}</p>\n                                <p>{content}</p>\n                            </li>\n                        );\n                    })}\n                </ul>\n            ) : (\n                <p>We don't have any reviews</p>\n            )}\n        </>\n    );\n};\n\nReviews.propTypes = {\n    reviews: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            author: PropTypes.string.isRequired,\n            content: PropTypes.string.isRequired,\n        })\n    ),\n};\n\nexport default Reviews;\n","import Axios from 'axios';\n\nAxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '941cb65a7dbaeeae793e2e0a05475118';\n\n\nexport const fetchFilms = async () => {\n    try {\n        const r = await Axios.get(`trending/movie/week?api_key=${API_KEY}`);\n        return r.data.results;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n\nexport const fetchSource = async query => {\n    const params = new URLSearchParams({\n        api_key: API_KEY,\n        query,\n    });\n    try {\n        const r = await Axios.get(`search/movie?${params}`);\n        return r.data.results;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n\nexport const fetchMovieDetails = async movieId => {\n    try {\n        const r = await Axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n        return r.data;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const fetchMovieCast = async movieId => {\n    try {\n        const r = await Axios.get(`movie/${movieId}/credits?api_key=${API_KEY}`);\n        return r.data.cast;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n\nexport const fetchReviews = async movieId => {\n    try {\n        const r = await Axios.get(`movie/${movieId}/reviews?api_key=${API_KEY}`);\n        return r.data.results;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n\n\n// https://api.themoviedb.org/3/movie/76341?api_key=<<api_key>>\n// GET /trending/{media_type}/{time_window}"],"names":["movieId","useParams","useState","reviews","setReviews","useEffect","fetchReviews","r","toast","message","getReviews","length","map","id","author","content","Axios","API_KEY","fetchFilms","data","results","console","log","fetchSource","query","params","URLSearchParams","api_key","fetchMovieDetails","fetchMovieCast","cast"],"sourceRoot":""}